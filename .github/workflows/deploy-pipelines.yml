name: Deploy Pipelines - Release and Publish

# Release Method:
# Only Manual
# Define if is a major, minor or path
# if is a prerelease name of the branch have to start with release-**
#    set the prerelease input with the right version (alpha, beta, rc)
# if is an official release name of the branch have to be main
# NOTE: in case of official release the tag will be in the form X.Y.Z
#       in case of prerelease the tag will be in the form X.Y.Z-PRERELEASE_TYPE.TIMESTAMP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment where the artifact will be deployed.
        type: string
        required: true
        default: prod
      npm_registry:
        required: false
        default: https://registry.npmjs.org/
        type: string
      release_type:
        required: false
        description: Define the version bump to apply
        type: choice
        default: minor
        options:
          - major
          - minor
          - patch
      prerelease:
        required: false
        description: Define if it's a pre-release
        type: choice
        default: alpha
        options:
          - alpha
          - beta
          - rc
env:
  BUNDLE_NAME: bundle

concurrency:
  group: ${{ github.workflow }}-cd
  cancel-in-progress: false

jobs:
  release:
    if: github.ref == format('refs/heads/main') || startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}-cd
    permissions:
      contents: write
      actions: write
      id-token: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TYPE: ${{ inputs.release_type || 'minor' }}
      PRERELEASE: ${{ inputs.prerelease || 'alpha' }}

    steps:
      - name: Check-out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version-file: ".node-version"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies
        run: |
          yarn install

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag --list '[0-9]*.[0-9]*.[0-9]' --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="0.0.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      # Determine the next tag
      - name: Determine next tag
        id: next_tag
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
          
          # Check if it's a pre-release or official release
          if [[ "${{ github.ref }}" == refs/heads/main ]]; then
            # Official release - determine if it's a major, minor, or patch
            if [[ ${{ env.RELEASE_TYPE }} == "major" ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ ${{ env.RELEASE_TYPE }} == "minor" ]]; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
            echo "next_tag=${major}.${minor}.${patch}" >> $GITHUB_ENV
            echo "next_version=${major}.${minor}.${patch}" >> $GITHUB_ENV
            echo "prerelease_enabled=false" >> $GITHUB_ENV
            echo "release_name=Release ${major}.${minor}.${patch} - $(date +'%Y-%m-%d')" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            # Pre-release - use same logic but append '-alpha/beta/rc.timestamp'
            if [[ ${{ env.RELEASE_TYPE }} == "major" ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ ${{ env.RELEASE_TYPE }} == "minor" ]]; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
            timestamp=$(date +'%Y%m%d%H%M%S')
            echo "next_tag=${major}.${minor}.${patch}-${{ env.PRERELEASE }}.${timestamp}" >> $GITHUB_ENV
            echo "next_version=${major}.${minor}.${patch}" >> $GITHUB_ENV
            echo "prerelease_enabled=true" >> $GITHUB_ENV
            echo "release_name=Pre-Release ${major}.${minor}.${patch}-${{ env.PRERELEASE }} - $(date +'%Y-%m-%d')" >> $GITHUB_ENV
          else
            echo "This branch does not match the release criteria."
            exit 1
          fi

      - name: Commit version bump
        run: |
          # Install semver tool
          npm install -g semver

          # Bump the version according to the release input
          yarn plugin import version
          yarn version --new-version ${{ env.next_version }}

          # Push the branch and tags
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git push origin ${{ github.ref }} --tags

      # Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes:" > CHANGELOG.md
          echo "Auto-generated release for ${{ github.ref }}" >> CHANGELOG.md
          if [ "${{ env.latest_tag }}" == "0.0.0" ]; then
            echo "Initial commit" >> CHANGELOG.md
          else
            echo "$(git log ${latest_tag}..HEAD --pretty=format:"* %h %s" --abbrev-commit --no-merges)" >> CHANGELOG.md
          fi

      # Create the release (pre-release for branches like 'release-**', official for 'main')
      - name: Create Release
        run: |
          gh release create \
          ${{ env.next_tag }} \
          --target ${{ github.sha }} \
          --title "${{ env.release_name }}" \
          --notes-file CHANGELOG.md \
          $(if [[ "${{ env.prerelease_enabled }}" == "true" ]]; then echo "--prerelease"; fi)

  build:
    needs: release
    runs-on: ubuntu-22.04
    env:
      WORKSPACE: ${{ github.workspace }}

    steps:
      - name: Check-out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version-file: ".node-version"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies
        run: yarn install --immutable
        working-directory: .

      - name: Build
        run: yarn build
        working-directory: .

      - name: Copy deploy files
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          TARGET_FOLDER: "${{ github.workspace }}/${{ env.BUNDLE_NAME }}"
          SOURCE_FOLDER: "${{ github.workspace }}"
          CONTENTS: |
            README.md
            LICENSE
            CHANGELOG
            package.json
            dist/**
            !dist/stories/**/*
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |-
            const fs = require('fs').promises
            const path = require('path')
            const target = path.resolve(process.env.TARGET_FOLDER)

            process.chdir(process.env.SOURCE_FOLDER || '.')

            if (process.env.CLEAN_TARGET_FOLDER === 'true') await io.rmRF(target)
            const flattenFolders = process.env.FLATTEN_FOLDERS === 'true'
            const options = {force: process.env.OVERWRITE === 'true'}
            const globber = await glob.create(process.env.CONTENTS || '**')

            for await (const file of globber.globGenerator()) {
              if ((await fs.lstat(file)).isDirectory()) continue
              const filename = flattenFolders ? path.basename(file) : file.substring(process.cwd().length)
              const dest = path.join(target, filename)
              await io.mkdirP(path.dirname(dest))
              await io.cp(file, dest, options)
            }

      - name: Upload Artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ env.BUNDLE_NAME }}
          path: ${{ env.BUNDLE_NAME }}
          if-no-files-found: error
          retention-days: 7

  deploy:
    if: ${{ !github.event.act }}
    needs: [build]
    runs-on: 'ubuntu-22.04'
    environment: ${{ inputs.environment }}-cd
    permissions:
      id-token: write
      contents: read
    env:
      NPM_REGISTRY: ${{ inputs.npm_registry || 'https://registry.npmjs.org' }}

    steps:
      - name: checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Download Artifact
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: ${{ env.BUNDLE_NAME }}
          path: ${{ env.BUNDLE_NAME }}

      ## DELETE AFTER TESTS
      - name: Publish
        run: npm publish --access public --registry ${{ env.NPM_REGISTRY }} --verbose --dry-run
        working-directory: "${{ env.BUNDLE_NAME }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # Add secret on GitHub Environment

      ## UNCOMMENT AFTER TESTS
      # - name: Publish
      #   run: npm publish --access public --registry ${{ env.NPM_REGISTRY }} --verbose
      #   working-directory: "${{ env.BUNDLE_NAME }}"
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}